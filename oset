#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace __gnu_pbds;

#define oset tree<ll,null_type,less<ll>,rb_tree_tag,tree_order_statistics_node_update>

// BELOW ARE SOME IMPORTANT INFORMATION ABOUT OSET
// REMEMBER IN MULIT ORDERED SET values can only be deleted as follows:-
   st.erase(st.upper_bound(value));

// extra functions
// 1) A.order_of_key(n);
//2) A.find_by_order(indx); if(indx>=A.size()? 0:s[indx]);

// less-> set,less_equal-> multiset.
// greater-> set,greater_equal-> multiset.

// when we use set/multiset in which the elements are stored in non_decreasing order
// 1) s.order_of_key(n)-> returns the elements less than n;
// 2) *s.find_by_order(n)-> returns the element present in that indx otherwise returns 0;
// 3) *upper_bound(n)-> returns value strictly greater than n if present in the set/multiset otherwise returns 0;
// 4) *lower_bound(n)-> return value greater than or equal to n if present in the set/multiset otherwise returns 0;


// when we use set/multiset in which the elements are stored in non_increasing order
// 1) s.order_of_key(n)-> returns the elements greater than n;
// 2) *s.find_by_order(n)-> return the element present in that indx otherwise returns 0;
// 3) *upper_bound(n)-> returns value strictly smaller than n otherwise returns 0;
// 4) *lower_bound(n)-> returns value less than or equal to n otherwise returns 0;

// removing elements
// s.erase(3) (the element 3 will be removed from the oset iff it is present otherwise nothing will happen);
// values can also be deleted using an iterator.

// oset can be used for any datatype.
// oset is a bit slow than normal set.

// You cannot delete values using iterators in ordered multiset.
